package com.swust.kelab.web.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import com.swust.kelab.domain.AlertConfig;
import com.swust.kelab.model.CommonQuery;
import com.swust.kelab.model.QueryData;
import com.swust.kelab.service.AlertConfigService;
import com.swust.kelab.web.json.JsonAndView;


@Controller
@RequestMapping("/alertConfig")
public class AlertConfigController {
	@Autowired
	private AlertConfigService alertConfigService;
	private static final Integer userID=1;
	
	
	@InitBinder
	private void dateBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd/ HH:mm:ss");
        //Create a new CustomDateEditor
		CustomDateEditor editor = new CustomDateEditor(dateFormat, true);
        //Register it as custom editor for the Date type
		binder.registerCustomEditor(Date.class, editor);
	}
	/**
	 * 增加一个告警设置
	 * @param alertConfig
	 * @return 是否添加成功
	 */
	@RequestMapping(value="/addOne",method=RequestMethod.GET)
	public JsonAndView addOne(AlertConfig alertConfig){
		JsonAndView jv = new JsonAndView();
		alertConfig.setUserID(userID);
		if(alertConfig.getConfigTime()==null){
			alertConfig.setConfigTime(new Date());
		}
		alertConfigService.addOneAlertConfig(alertConfig);
		jv.setRet(true);		
		return jv;	
	}
	
	/**
	 * 删除一个告警设置
	 * @param alertConfigID
	 * @return 是否删除成功
	 */
	@RequestMapping(value="/deleteOne",method=RequestMethod.GET)
	public JsonAndView deleteOneAlertConfig(int alertConfigID){
		JsonAndView jv = new JsonAndView();
		try{
			int flag = alertConfigService.deleteOneAlertConfig(alertConfigID);
		}catch(Exception e){
			jv.setRet(false);
			jv.setErrmsg("delete failed");
		}
		jv.setRet(true);
		return jv;	
	}	
	
	
	/**
	 * @description 分页查询告警配置和对应的告警
	 * @param query
	 * @param pageNumber
	 * @return
	 */
	@RequestMapping(value="/queryByPage",method=RequestMethod.GET)
	public JsonAndView query(CommonQuery query, Integer pageNumber){
		JsonAndView jv = new JsonAndView();
		if(query.getRecordPerPage()<=0){
			query.setRecordPerPage(5);
		}
		if(pageNumber==null||pageNumber<=0){
			pageNumber = 1;
		}
		System.out.println("recordPerPage:"+query.getRecordPerPage()+"\npageNumber:"+pageNumber);
		try{
			QueryData result = alertConfigService.queryBypage(query, pageNumber, userID);
			if(result == null){
				jv.setRet(false);
				jv.setErrcode(1);
				jv.setErrmsg("null");
			}else{
				jv.addData("totalPage",result.getTotalPage());
				jv.addData("totalCount", result.getTotalCount());
				jv.addData("items", result.getPageData());
			}
		}catch(Exception e){
			
		}	
		return jv;	
	}
	
}
