package com.swust.kelab.serviceTest;

import java.util.Map;

import org.apache.commons.lang3.RandomStringUtils;
import org.junit.Before;
import org.junit.Test;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.task.SyncTaskExecutor;

public class LocationEnginTest {

	SimpleJobLauncher launcher;
	JobExecution je;
	Map<String, JobParameter> parameters;
	Job jb;

	@Before
	public void init() {
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				new String[] {
						// "classpath:spring/applicationContext.xml",
						"classpath:spring/dao.xml",
						"classpath:spring/service.xml",
						//"classpath:spring/quartz.xml",
						"classpath:spring/batch.xml" });
		launcher = new SimpleJobLauncher();
		launcher.setJobRepository((JobRepository) ctx.getBean("jobRepository"));
		launcher.setTaskExecutor(new SyncTaskExecutor());
		jb = (Job) ctx.getBean("locationEngineJob");
	}

	//@Test
	public void startRuleEngineJob() {
		try {
			JobParametersBuilder jpBuilder = new JobParametersBuilder();
//			jpBuilder.addLong("pageSize",new Long(Long.MAX_VALUE));
//			jpBuilder.addLong("startID",new Long(10));
//			jpBuilder.addLong("endID",new Long(20));
			jpBuilder.addString("pageSize","10");
			jpBuilder.addString("startID","10");
			jpBuilder.addString("endID","20");
			jpBuilder.addString("Random", RandomStringUtils.random(5));
			je = launcher.run(jb, jpBuilder.toJobParameters());
			System.out.println(je);
			System.out.println(je.getJobInstance());
			System.out.println(je.getStepExecutions());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Test
	public void startQuartz() throws InterruptedException {
		Thread.sleep(20000);
	}
}
