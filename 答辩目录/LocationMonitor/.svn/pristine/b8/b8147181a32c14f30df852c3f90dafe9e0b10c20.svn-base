package com.swust.kelab.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.swust.kelab.domain.LocationSimple;
import com.swust.kelab.model.CommonQuery;
import com.swust.kelab.model.ObjModel;
import com.swust.kelab.model.PageData;
import com.swust.kelab.model.QueryData;
import com.swust.kelab.repos.LocationQueryDAO;
import com.swust.kelab.repos.bean.ListQuery;
import com.swust.kelab.util.PageHandle;

@Service("locationQueryService")
public class LocationQueryService {
	@Autowired
	private LocationQueryDAO locationQueryDAO;
	private List<ObjModel> objectList;
	
	/**
	 * 分页查询
	 * @param objm
	 * @param query
	 * @param pageNumber
	 * @return
	 */
	public QueryData queryBypage(ObjModel objm, CommonQuery query, Integer pageNumber) {
		
		Date time1 = new Date();
		//取出接收到的参数
		String imei = objm.getImei();
		String imsi = objm.getImsi();
		String phone = objm.getPhone();
		String longitudeA = objm.getLongitudeA();			
		String latitudeA = objm.getLatitudeA();
		String longitudeB = objm.getLongitudeB();
		String latitudeB = objm.getLatitudeB();
		
		System.out.println("objmIMEI:"+ imei);
		
		QueryData result = new QueryData();
		int totalPage = 0;
		ListQuery queryMap = query.format();
		queryMap.fill("imei", imei);
		queryMap.fill("imsi", imsi);
		queryMap.fill("phone", phone);
		
		//查询符合条件的对象数量
		int allCount = locationQueryDAO.countObjNum(queryMap);
		if(query.getRecordPerPage()<=0){
			query.setRecordPerPage(5);
		}
		
		System.out.println("显示页码:"+pageNumber);
		
		if(query.getPageArray()==null&&pageNumber!=null){
			query.setPageArray(new int[]{pageNumber});
		}else{
			query.setPageArray(new int[]{1});
		}
		
		//查询的起始位置和长度
		int startIndex = 0;
		int endIndex = query.getRecordPerPage();
		queryMap.fill("startIndex", startIndex);
		queryMap.fill("maxCount", allCount);
		
		//查询符合条件的对象
		objectList = locationQueryDAO.queryObjects(queryMap);
		
		System.out.println("objectsize:"+objectList.size());
		
		//对每个对象进行地理位置查询操作
		Iterator objIterator = objectList.iterator();
		while(objIterator.hasNext()){
			ObjModel object = (ObjModel) objIterator.next();
			System.out.println("imei:"+object.getImei()+"\nimsi:"+object.getImsi());
			if(longitudeA!=null&&longitudeA!=""&&longitudeB!=null&&longitudeB!=""
				    &&latitudeA!=null&&latitudeA!=""&&latitudeB!=null&&latitudeB!=""){
				object.setLongitudeA(longitudeA);
				object.setLongitudeB(longitudeB);
				object.setLatitudeA(latitudeA);
				object.setLatitudeB(latitudeB);
			}
			
			//为每一个对象添加时间限制
			String time = new String();
			time = objm.getTime();
			if(time!=null&&time!=""){
				String dateStr[] = time.split(" - ");
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd/ HH:mm");
				try {
					object.setDateStart(sdf.parse(dateStr[0]));
					object.setDateEnd(sdf.parse(dateStr[1]));
				} catch (ParseException e) {
					e.printStackTrace();
					System.out.println("时间转化异常");
					return null;
				}
			}
			System.out.println("-----位置查询-----");
			//查询该对象对应的地理位置
			List<LocationSimple> items = new ArrayList<LocationSimple>();
			items = this.queryLocation(object);
			object.setItems(items);
			if(!items.isEmpty()){
				time = items.get(0).getTime()+" - "+items.get(items.size()-1).getTime();
				object.setTime(time);
			}else{
				objIterator.remove();
				allCount--;
			}
			object.setDateStart(null);
			object.setDateEnd(null);	
		}
		//设置新的总数量
		result.setTotalCount(allCount);
		//计算总页数
		totalPage = QueryData.computeTotalPage(allCount, query.getRecordPerPage());
		result.setTotalPage(totalPage);
		//为每个对象编号并移除不需要返回的对象
		int objId = 0;
		Iterator objIter = objectList.iterator();
		while(objIter.hasNext()){
			ObjModel object = (ObjModel) objIter.next();
			object.setObjId(++objId);
			if(objId <= (pageNumber-1)*query.getRecordPerPage()||objId > pageNumber*query.getRecordPerPage()){
				objIter.remove();
			}
		}
		Date time2 = new Date();
		long time = time2.getTime()-time1.getTime();
		System.out.println("service运行时间："+ time);
		List<PageData> pageDataList = Lists.newArrayList();
		return PageHandle.initialQueryData(result, pageDataList, query, objectList, totalPage);
	}
	
	
	/**
	 * 根据ObjModel查询地理位置信息
	 * @param object
	 * @return List<LocationSimple>
	 */
	public List<LocationSimple> queryLocation(ObjModel object){
		List<LocationSimple> locaitons = new ArrayList<LocationSimple>();
		locaitons = locationQueryDAO.queryLocation(object);
		System.out.println("itemssize:"+locaitons.size());
		Iterator iteri = locaitons.iterator();
		int dataId = 0;
		System.out.println("location遍历");
		while(iteri.hasNext()){
			
			LocationSimple location = (LocationSimple) iteri.next();
			location.setTime(location.getTimeDate());
			location.setTimeDate(null);
			dataId++;
//			System.out.println("dataId:"+dataId);
			
			String longitudeA = object.getLongitudeA();			
			String latitudeA = object.getLatitudeA();
			String longitudeB = object.getLongitudeB();
			String latitudeB = object.getLatitudeB();

			double longitude = Double.parseDouble(location.getLongitude());
			double latitude = Double.parseDouble(location.getLatitude());
			
			//判断位置是否在指定区域内，如果不在，则移除该点		
			if(longitudeA!=null&&longitudeA!=""&&longitudeB!=null&&longitudeB!=""
			    &&latitudeA!=null&&latitudeA!=""&&latitudeB!=null&&latitudeB!=""){
				if(longitude<Double.parseDouble(longitudeA)||longitude>Double.parseDouble(longitudeB)
					||latitude<Double.parseDouble(latitudeA)||latitude>Double.parseDouble(latitudeB)){
					iteri.remove();
					dataId--;
				}
			}
			location.setDataId(dataId);
		}
		return locaitons;		
	}
}
